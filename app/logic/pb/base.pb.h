// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: base.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_base_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_base_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_base_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_base_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_base_2eproto;
namespace XMVVM {
class XMVVM_ParamBool;
class XMVVM_ParamBoolDefaultTypeInternal;
extern XMVVM_ParamBoolDefaultTypeInternal _XMVVM_ParamBool_default_instance_;
class XMVVM_ParamInt32;
class XMVVM_ParamInt32DefaultTypeInternal;
extern XMVVM_ParamInt32DefaultTypeInternal _XMVVM_ParamInt32_default_instance_;
class XMVVM_ParamString;
class XMVVM_ParamStringDefaultTypeInternal;
extern XMVVM_ParamStringDefaultTypeInternal _XMVVM_ParamString_default_instance_;
}  // namespace XMVVM
PROTOBUF_NAMESPACE_OPEN
template<> ::XMVVM::XMVVM_ParamBool* Arena::CreateMaybeMessage<::XMVVM::XMVVM_ParamBool>(Arena*);
template<> ::XMVVM::XMVVM_ParamInt32* Arena::CreateMaybeMessage<::XMVVM::XMVVM_ParamInt32>(Arena*);
template<> ::XMVVM::XMVVM_ParamString* Arena::CreateMaybeMessage<::XMVVM::XMVVM_ParamString>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace XMVVM {

// ===================================================================

class XMVVM_ParamString :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:XMVVM.XMVVM_ParamString) */ {
 public:
  XMVVM_ParamString();
  virtual ~XMVVM_ParamString();

  XMVVM_ParamString(const XMVVM_ParamString& from);
  XMVVM_ParamString(XMVVM_ParamString&& from) noexcept
    : XMVVM_ParamString() {
    *this = ::std::move(from);
  }

  inline XMVVM_ParamString& operator=(const XMVVM_ParamString& from) {
    CopyFrom(from);
    return *this;
  }
  inline XMVVM_ParamString& operator=(XMVVM_ParamString&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const XMVVM_ParamString& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const XMVVM_ParamString* internal_default_instance() {
    return reinterpret_cast<const XMVVM_ParamString*>(
               &_XMVVM_ParamString_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(XMVVM_ParamString& a, XMVVM_ParamString& b) {
    a.Swap(&b);
  }
  inline void Swap(XMVVM_ParamString* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline XMVVM_ParamString* New() const final {
    return CreateMaybeMessage<XMVVM_ParamString>(nullptr);
  }

  XMVVM_ParamString* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<XMVVM_ParamString>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const XMVVM_ParamString& from);
  void MergeFrom(const XMVVM_ParamString& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(XMVVM_ParamString* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "XMVVM.XMVVM_ParamString";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_base_2eproto);
    return ::descriptor_table_base_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 1,
  };
  // string value = 1;
  void clear_value();
  const std::string& value() const;
  void set_value(const std::string& value);
  void set_value(std::string&& value);
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  std::string* mutable_value();
  std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // @@protoc_insertion_point(class_scope:XMVVM.XMVVM_ParamString)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_base_2eproto;
};
// -------------------------------------------------------------------

class XMVVM_ParamInt32 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:XMVVM.XMVVM_ParamInt32) */ {
 public:
  XMVVM_ParamInt32();
  virtual ~XMVVM_ParamInt32();

  XMVVM_ParamInt32(const XMVVM_ParamInt32& from);
  XMVVM_ParamInt32(XMVVM_ParamInt32&& from) noexcept
    : XMVVM_ParamInt32() {
    *this = ::std::move(from);
  }

  inline XMVVM_ParamInt32& operator=(const XMVVM_ParamInt32& from) {
    CopyFrom(from);
    return *this;
  }
  inline XMVVM_ParamInt32& operator=(XMVVM_ParamInt32&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const XMVVM_ParamInt32& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const XMVVM_ParamInt32* internal_default_instance() {
    return reinterpret_cast<const XMVVM_ParamInt32*>(
               &_XMVVM_ParamInt32_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(XMVVM_ParamInt32& a, XMVVM_ParamInt32& b) {
    a.Swap(&b);
  }
  inline void Swap(XMVVM_ParamInt32* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline XMVVM_ParamInt32* New() const final {
    return CreateMaybeMessage<XMVVM_ParamInt32>(nullptr);
  }

  XMVVM_ParamInt32* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<XMVVM_ParamInt32>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const XMVVM_ParamInt32& from);
  void MergeFrom(const XMVVM_ParamInt32& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(XMVVM_ParamInt32* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "XMVVM.XMVVM_ParamInt32";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_base_2eproto);
    return ::descriptor_table_base_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 1,
  };
  // int32 value = 1;
  void clear_value();
  ::PROTOBUF_NAMESPACE_ID::int32 value() const;
  void set_value(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_value() const;
  void _internal_set_value(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:XMVVM.XMVVM_ParamInt32)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_base_2eproto;
};
// -------------------------------------------------------------------

class XMVVM_ParamBool :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:XMVVM.XMVVM_ParamBool) */ {
 public:
  XMVVM_ParamBool();
  virtual ~XMVVM_ParamBool();

  XMVVM_ParamBool(const XMVVM_ParamBool& from);
  XMVVM_ParamBool(XMVVM_ParamBool&& from) noexcept
    : XMVVM_ParamBool() {
    *this = ::std::move(from);
  }

  inline XMVVM_ParamBool& operator=(const XMVVM_ParamBool& from) {
    CopyFrom(from);
    return *this;
  }
  inline XMVVM_ParamBool& operator=(XMVVM_ParamBool&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const XMVVM_ParamBool& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const XMVVM_ParamBool* internal_default_instance() {
    return reinterpret_cast<const XMVVM_ParamBool*>(
               &_XMVVM_ParamBool_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(XMVVM_ParamBool& a, XMVVM_ParamBool& b) {
    a.Swap(&b);
  }
  inline void Swap(XMVVM_ParamBool* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline XMVVM_ParamBool* New() const final {
    return CreateMaybeMessage<XMVVM_ParamBool>(nullptr);
  }

  XMVVM_ParamBool* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<XMVVM_ParamBool>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const XMVVM_ParamBool& from);
  void MergeFrom(const XMVVM_ParamBool& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(XMVVM_ParamBool* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "XMVVM.XMVVM_ParamBool";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_base_2eproto);
    return ::descriptor_table_base_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 1,
  };
  // bool value = 1;
  void clear_value();
  bool value() const;
  void set_value(bool value);
  private:
  bool _internal_value() const;
  void _internal_set_value(bool value);
  public:

  // @@protoc_insertion_point(class_scope:XMVVM.XMVVM_ParamBool)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  bool value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_base_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// XMVVM_ParamString

// string value = 1;
inline void XMVVM_ParamString::clear_value() {
  value_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& XMVVM_ParamString::value() const {
  // @@protoc_insertion_point(field_get:XMVVM.XMVVM_ParamString.value)
  return _internal_value();
}
inline void XMVVM_ParamString::set_value(const std::string& value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:XMVVM.XMVVM_ParamString.value)
}
inline std::string* XMVVM_ParamString::mutable_value() {
  // @@protoc_insertion_point(field_mutable:XMVVM.XMVVM_ParamString.value)
  return _internal_mutable_value();
}
inline const std::string& XMVVM_ParamString::_internal_value() const {
  return value_.GetNoArena();
}
inline void XMVVM_ParamString::_internal_set_value(const std::string& value) {
  
  value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void XMVVM_ParamString::set_value(std::string&& value) {
  
  value_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:XMVVM.XMVVM_ParamString.value)
}
inline void XMVVM_ParamString::set_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:XMVVM.XMVVM_ParamString.value)
}
inline void XMVVM_ParamString::set_value(const char* value, size_t size) {
  
  value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:XMVVM.XMVVM_ParamString.value)
}
inline std::string* XMVVM_ParamString::_internal_mutable_value() {
  
  return value_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* XMVVM_ParamString::release_value() {
  // @@protoc_insertion_point(field_release:XMVVM.XMVVM_ParamString.value)
  
  return value_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void XMVVM_ParamString::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  value_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:XMVVM.XMVVM_ParamString.value)
}

// -------------------------------------------------------------------

// XMVVM_ParamInt32

// int32 value = 1;
inline void XMVVM_ParamInt32::clear_value() {
  value_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 XMVVM_ParamInt32::_internal_value() const {
  return value_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 XMVVM_ParamInt32::value() const {
  // @@protoc_insertion_point(field_get:XMVVM.XMVVM_ParamInt32.value)
  return _internal_value();
}
inline void XMVVM_ParamInt32::_internal_set_value(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  value_ = value;
}
inline void XMVVM_ParamInt32::set_value(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:XMVVM.XMVVM_ParamInt32.value)
}

// -------------------------------------------------------------------

// XMVVM_ParamBool

// bool value = 1;
inline void XMVVM_ParamBool::clear_value() {
  value_ = false;
}
inline bool XMVVM_ParamBool::_internal_value() const {
  return value_;
}
inline bool XMVVM_ParamBool::value() const {
  // @@protoc_insertion_point(field_get:XMVVM.XMVVM_ParamBool.value)
  return _internal_value();
}
inline void XMVVM_ParamBool::_internal_set_value(bool value) {
  
  value_ = value;
}
inline void XMVVM_ParamBool::set_value(bool value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:XMVVM.XMVVM_ParamBool.value)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace XMVVM

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_base_2eproto
