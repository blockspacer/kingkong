// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: base.proto

#include "base.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace XMVVM {
class XMVVM_ParamStringDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<XMVVM_ParamString> _instance;
} _XMVVM_ParamString_default_instance_;
class XMVVM_ParamInt32DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<XMVVM_ParamInt32> _instance;
} _XMVVM_ParamInt32_default_instance_;
class XMVVM_ParamBoolDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<XMVVM_ParamBool> _instance;
} _XMVVM_ParamBool_default_instance_;
}  // namespace XMVVM
static void InitDefaultsscc_info_XMVVM_ParamBool_base_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::XMVVM::_XMVVM_ParamBool_default_instance_;
    new (ptr) ::XMVVM::XMVVM_ParamBool();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::XMVVM::XMVVM_ParamBool::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_XMVVM_ParamBool_base_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_XMVVM_ParamBool_base_2eproto}, {}};

static void InitDefaultsscc_info_XMVVM_ParamInt32_base_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::XMVVM::_XMVVM_ParamInt32_default_instance_;
    new (ptr) ::XMVVM::XMVVM_ParamInt32();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::XMVVM::XMVVM_ParamInt32::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_XMVVM_ParamInt32_base_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_XMVVM_ParamInt32_base_2eproto}, {}};

static void InitDefaultsscc_info_XMVVM_ParamString_base_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::XMVVM::_XMVVM_ParamString_default_instance_;
    new (ptr) ::XMVVM::XMVVM_ParamString();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::XMVVM::XMVVM_ParamString::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_XMVVM_ParamString_base_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_XMVVM_ParamString_base_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_base_2eproto[3];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_base_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_base_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_base_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::XMVVM::XMVVM_ParamString, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::XMVVM::XMVVM_ParamString, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::XMVVM::XMVVM_ParamInt32, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::XMVVM::XMVVM_ParamInt32, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::XMVVM::XMVVM_ParamBool, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::XMVVM::XMVVM_ParamBool, value_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::XMVVM::XMVVM_ParamString)},
  { 6, -1, sizeof(::XMVVM::XMVVM_ParamInt32)},
  { 12, -1, sizeof(::XMVVM::XMVVM_ParamBool)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::XMVVM::_XMVVM_ParamString_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::XMVVM::_XMVVM_ParamInt32_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::XMVVM::_XMVVM_ParamBool_default_instance_),
};

const char descriptor_table_protodef_base_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\nbase.proto\022\005XMVVM\"\"\n\021XMVVM_ParamString"
  "\022\r\n\005value\030\001 \001(\t\"!\n\020XMVVM_ParamInt32\022\r\n\005v"
  "alue\030\001 \001(\005\" \n\017XMVVM_ParamBool\022\r\n\005value\030\001"
  " \001(\010b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_base_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_base_2eproto_sccs[3] = {
  &scc_info_XMVVM_ParamBool_base_2eproto.base,
  &scc_info_XMVVM_ParamInt32_base_2eproto.base,
  &scc_info_XMVVM_ParamString_base_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_base_2eproto_once;
static bool descriptor_table_base_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_base_2eproto = {
  &descriptor_table_base_2eproto_initialized, descriptor_table_protodef_base_2eproto, "base.proto", 132,
  &descriptor_table_base_2eproto_once, descriptor_table_base_2eproto_sccs, descriptor_table_base_2eproto_deps, 3, 0,
  schemas, file_default_instances, TableStruct_base_2eproto::offsets,
  file_level_metadata_base_2eproto, 3, file_level_enum_descriptors_base_2eproto, file_level_service_descriptors_base_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_base_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_base_2eproto), true);
namespace XMVVM {

// ===================================================================

void XMVVM_ParamString::InitAsDefaultInstance() {
}
class XMVVM_ParamString::_Internal {
 public:
};

XMVVM_ParamString::XMVVM_ParamString()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:XMVVM.XMVVM_ParamString)
}
XMVVM_ParamString::XMVVM_ParamString(const XMVVM_ParamString& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_value().empty()) {
    value_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  // @@protoc_insertion_point(copy_constructor:XMVVM.XMVVM_ParamString)
}

void XMVVM_ParamString::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_XMVVM_ParamString_base_2eproto.base);
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

XMVVM_ParamString::~XMVVM_ParamString() {
  // @@protoc_insertion_point(destructor:XMVVM.XMVVM_ParamString)
  SharedDtor();
}

void XMVVM_ParamString::SharedDtor() {
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void XMVVM_ParamString::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const XMVVM_ParamString& XMVVM_ParamString::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_XMVVM_ParamString_base_2eproto.base);
  return *internal_default_instance();
}


void XMVVM_ParamString::Clear() {
// @@protoc_insertion_point(message_clear_start:XMVVM.XMVVM_ParamString)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* XMVVM_ParamString::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "XMVVM.XMVVM_ParamString.value"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* XMVVM_ParamString::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:XMVVM.XMVVM_ParamString)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string value = 1;
  if (this->value().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_value().data(), static_cast<int>(this->_internal_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "XMVVM.XMVVM_ParamString.value");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:XMVVM.XMVVM_ParamString)
  return target;
}

size_t XMVVM_ParamString::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:XMVVM.XMVVM_ParamString)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string value = 1;
  if (this->value().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void XMVVM_ParamString::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:XMVVM.XMVVM_ParamString)
  GOOGLE_DCHECK_NE(&from, this);
  const XMVVM_ParamString* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<XMVVM_ParamString>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:XMVVM.XMVVM_ParamString)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:XMVVM.XMVVM_ParamString)
    MergeFrom(*source);
  }
}

void XMVVM_ParamString::MergeFrom(const XMVVM_ParamString& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:XMVVM.XMVVM_ParamString)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.value().size() > 0) {

    value_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
}

void XMVVM_ParamString::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:XMVVM.XMVVM_ParamString)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void XMVVM_ParamString::CopyFrom(const XMVVM_ParamString& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:XMVVM.XMVVM_ParamString)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool XMVVM_ParamString::IsInitialized() const {
  return true;
}

void XMVVM_ParamString::InternalSwap(XMVVM_ParamString* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  value_.Swap(&other->value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata XMVVM_ParamString::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void XMVVM_ParamInt32::InitAsDefaultInstance() {
}
class XMVVM_ParamInt32::_Internal {
 public:
};

XMVVM_ParamInt32::XMVVM_ParamInt32()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:XMVVM.XMVVM_ParamInt32)
}
XMVVM_ParamInt32::XMVVM_ParamInt32(const XMVVM_ParamInt32& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  value_ = from.value_;
  // @@protoc_insertion_point(copy_constructor:XMVVM.XMVVM_ParamInt32)
}

void XMVVM_ParamInt32::SharedCtor() {
  value_ = 0;
}

XMVVM_ParamInt32::~XMVVM_ParamInt32() {
  // @@protoc_insertion_point(destructor:XMVVM.XMVVM_ParamInt32)
  SharedDtor();
}

void XMVVM_ParamInt32::SharedDtor() {
}

void XMVVM_ParamInt32::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const XMVVM_ParamInt32& XMVVM_ParamInt32::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_XMVVM_ParamInt32_base_2eproto.base);
  return *internal_default_instance();
}


void XMVVM_ParamInt32::Clear() {
// @@protoc_insertion_point(message_clear_start:XMVVM.XMVVM_ParamInt32)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_ = 0;
  _internal_metadata_.Clear();
}

const char* XMVVM_ParamInt32::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* XMVVM_ParamInt32::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:XMVVM.XMVVM_ParamInt32)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 value = 1;
  if (this->value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:XMVVM.XMVVM_ParamInt32)
  return target;
}

size_t XMVVM_ParamInt32::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:XMVVM.XMVVM_ParamInt32)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 value = 1;
  if (this->value() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void XMVVM_ParamInt32::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:XMVVM.XMVVM_ParamInt32)
  GOOGLE_DCHECK_NE(&from, this);
  const XMVVM_ParamInt32* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<XMVVM_ParamInt32>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:XMVVM.XMVVM_ParamInt32)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:XMVVM.XMVVM_ParamInt32)
    MergeFrom(*source);
  }
}

void XMVVM_ParamInt32::MergeFrom(const XMVVM_ParamInt32& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:XMVVM.XMVVM_ParamInt32)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.value() != 0) {
    _internal_set_value(from._internal_value());
  }
}

void XMVVM_ParamInt32::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:XMVVM.XMVVM_ParamInt32)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void XMVVM_ParamInt32::CopyFrom(const XMVVM_ParamInt32& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:XMVVM.XMVVM_ParamInt32)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool XMVVM_ParamInt32::IsInitialized() const {
  return true;
}

void XMVVM_ParamInt32::InternalSwap(XMVVM_ParamInt32* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(value_, other->value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata XMVVM_ParamInt32::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void XMVVM_ParamBool::InitAsDefaultInstance() {
}
class XMVVM_ParamBool::_Internal {
 public:
};

XMVVM_ParamBool::XMVVM_ParamBool()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:XMVVM.XMVVM_ParamBool)
}
XMVVM_ParamBool::XMVVM_ParamBool(const XMVVM_ParamBool& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  value_ = from.value_;
  // @@protoc_insertion_point(copy_constructor:XMVVM.XMVVM_ParamBool)
}

void XMVVM_ParamBool::SharedCtor() {
  value_ = false;
}

XMVVM_ParamBool::~XMVVM_ParamBool() {
  // @@protoc_insertion_point(destructor:XMVVM.XMVVM_ParamBool)
  SharedDtor();
}

void XMVVM_ParamBool::SharedDtor() {
}

void XMVVM_ParamBool::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const XMVVM_ParamBool& XMVVM_ParamBool::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_XMVVM_ParamBool_base_2eproto.base);
  return *internal_default_instance();
}


void XMVVM_ParamBool::Clear() {
// @@protoc_insertion_point(message_clear_start:XMVVM.XMVVM_ParamBool)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_ = false;
  _internal_metadata_.Clear();
}

const char* XMVVM_ParamBool::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* XMVVM_ParamBool::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:XMVVM.XMVVM_ParamBool)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool value = 1;
  if (this->value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:XMVVM.XMVVM_ParamBool)
  return target;
}

size_t XMVVM_ParamBool::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:XMVVM.XMVVM_ParamBool)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool value = 1;
  if (this->value() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void XMVVM_ParamBool::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:XMVVM.XMVVM_ParamBool)
  GOOGLE_DCHECK_NE(&from, this);
  const XMVVM_ParamBool* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<XMVVM_ParamBool>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:XMVVM.XMVVM_ParamBool)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:XMVVM.XMVVM_ParamBool)
    MergeFrom(*source);
  }
}

void XMVVM_ParamBool::MergeFrom(const XMVVM_ParamBool& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:XMVVM.XMVVM_ParamBool)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.value() != 0) {
    _internal_set_value(from._internal_value());
  }
}

void XMVVM_ParamBool::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:XMVVM.XMVVM_ParamBool)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void XMVVM_ParamBool::CopyFrom(const XMVVM_ParamBool& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:XMVVM.XMVVM_ParamBool)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool XMVVM_ParamBool::IsInitialized() const {
  return true;
}

void XMVVM_ParamBool::InternalSwap(XMVVM_ParamBool* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(value_, other->value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata XMVVM_ParamBool::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace XMVVM
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::XMVVM::XMVVM_ParamString* Arena::CreateMaybeMessage< ::XMVVM::XMVVM_ParamString >(Arena* arena) {
  return Arena::CreateInternal< ::XMVVM::XMVVM_ParamString >(arena);
}
template<> PROTOBUF_NOINLINE ::XMVVM::XMVVM_ParamInt32* Arena::CreateMaybeMessage< ::XMVVM::XMVVM_ParamInt32 >(Arena* arena) {
  return Arena::CreateInternal< ::XMVVM::XMVVM_ParamInt32 >(arena);
}
template<> PROTOBUF_NOINLINE ::XMVVM::XMVVM_ParamBool* Arena::CreateMaybeMessage< ::XMVVM::XMVVM_ParamBool >(Arena* arena) {
  return Arena::CreateInternal< ::XMVVM::XMVVM_ParamBool >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
